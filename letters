library	IEEE;
use	IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;
entity rght_tex is
	port (x  	: in integer range 0 to 16-1;
		  y		:	in integer range 0 to 16-1;
	      adress : in integer range 0 to 10-1;
		  RGB : out std_logic_vector(2 downto 0));

end rght_tex;

architecture RTL of rght_tex is 
signal s_dataout : integer range 0 to 1;
subtype t is integer range 0 to 1;
type st is array (0 to (10*8*8)-1) of t;


constant c_memory : st := 
(1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,

1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
0,0,0,1,1,0,0,0,
0,0,0,1,1,0,0,0,
0,0,0,1,1,0,0,0,
0,0,0,1,1,0,0,0,
0,0,0,1,1,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,

0,0,0,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,0,0,
1,1,0,0,0,0,0,0,
1,1,0,0,0,1,1,1,
1,1,0,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,0,1,1,1,1,1,1,
0,0,0,1,1,1,1,1,

0,0,1,1,1,1,0,0,
0,1,1,0,0,1,1,0,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,0,0,
0,1,1,1,1,1,0,0,
0,0,0,0,0,0,1,0,
1,1,0,0,0,0,1,1,
0,1,1,1,1,1,1,0,
0,0,1,1,1,1,0,0,

0,0,1,1,1,1,0,0,
0,1,1,1,1,1,1,0,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
0,1,1,1,1,1,1,0,
0,0,1,1,1,1,0,0,

0,0,1,1,1,0,0,0,
0,1,1,0,0,1,1,0,
0,1,1,0,0,0,1,1,
1,1,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
0,1,1,0,0,0,1,1,
0,1,1,0,0,1,1,0,
0,0,1,1,1,0,0,0,

0,0,1,1,1,1,0,0,
0,1,1,0,0,0,1,0,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,0,
1,1,1,1,1,1,1,0,
1,1,1,1,1,0,0,0,
1,1,0,0,1,1,0,0,
1,1,0,0,0,1,1,0,
1,1,0,0,0,0,1,1,

1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
1,1,1,1,1,1,1,0,
1,1,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,

1,1,1,1,1,1,0,0,
1,1,1,1,1,1,1,0,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,0,
1,1,1,1,1,1,0,0,
1,1,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,

1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,0,0,0,0,1,1,
1,1,1,0,0,1,1,1,
0,1,1,1,1,1,1,0 );

begin

	s_dataout <= c_memory(((adress * 8 * 8) + x  + y*8));										  

color_map : process(s_dataout)
begin	
	if (s_dataout = 1) then
		RGB <= "000";
	else
		RGB <= "111";		
	end if ;
end process;

end;



